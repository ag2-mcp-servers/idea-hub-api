# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:18:12+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class GoogleSearchIdeahubV1alphaAvailableLocale(BaseModel):
    locale: Optional[str] = Field(
        None, description='A string in BCP 47 format, without a resource prefix.'
    )
    name: Optional[str] = Field(
        None,
        description='A string in BCP 47 format, prefixed with the platform and property name, and "locales/". Format: platforms/{platform}/properties/{property}/locales/{locale}',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    POST_DRAFTED = 'POST_DRAFTED'
    POST_PUBLISHED = 'POST_PUBLISHED'
    POST_DELETED = 'POST_DELETED'
    POST_UNPUBLISHED = 'POST_UNPUBLISHED'


class GoogleSearchIdeahubV1alphaIdeaActivity(BaseModel):
    ideas: Optional[List[str]] = Field(
        None, description='The Idea IDs for this entry. If empty, topics should be set.'
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity}',
    )
    topics: Optional[List[str]] = Field(
        None, description='The Topic IDs for this entry. If empty, ideas should be set.'
    )
    type: Optional[Type] = Field(None, description='The type of activity performed.')
    uri: Optional[str] = Field(None, description='The uri the activity relates to.')


class GoogleSearchIdeahubV1alphaIdeaState(BaseModel):
    dismissed: Optional[bool] = Field(
        None, description='Whether the idea is dismissed.'
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}',
    )
    saved: Optional[bool] = Field(None, description='Whether the idea is saved.')


class GoogleSearchIdeahubV1alphaListAvailableLocalesResponse(BaseModel):
    availableLocales: Optional[List[GoogleSearchIdeahubV1alphaAvailableLocale]] = Field(
        None, description='Locales for which ideas are available for the given Creator.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class GoogleSearchIdeahubV1alphaTopic(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='String displayed to the creator indicating the name of the Topic.',
    )
    mid: Optional[str] = Field(None, description='The mID of the topic.')
    name: Optional[str] = Field(
        None, description='Unique identifier for the topic. Format: topics/{topic}'
    )


class GoogleSearchIdeahubV1alphaTopicState(BaseModel):
    dismissed: Optional[bool] = Field(
        None, description='Whether the topic is dismissed.'
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}',
    )
    saved: Optional[bool] = Field(None, description='Whether the topic is saved.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleSearchIdeahubV1alphaIdea(BaseModel):
    name: Optional[str] = Field(
        None, description='Unique identifier for the idea. Format: ideas/{ideaId}'
    )
    text: Optional[str] = Field(None, description='The ideaâ€™s text.')
    topics: Optional[List[GoogleSearchIdeahubV1alphaTopic]] = Field(
        None, description='The Topics that match the idea.'
    )


class GoogleSearchIdeahubV1alphaListIdeasResponse(BaseModel):
    ideas: Optional[List[GoogleSearchIdeahubV1alphaIdea]] = Field(
        None, description='Results for the ListIdeasRequest.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Used to fetch the next page in a subsequent request.'
    )
